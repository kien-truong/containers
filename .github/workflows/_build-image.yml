name: _build-image

on:
  workflow_call:
    inputs:
      path:
        required: true
        type: string
        description: |
          Path to the base or app folder
      schedule:
        required: false
        type: string
        description: |
          Will contain the schedule if this action is called by a scheduler

env:
  REGISTRY: ghcr.io
  BASE_NAME: ${{ github.repository_owner }}
  BUILDX_NO_DEFAULT_ATTESTATIONS: 1
  IMAGE_REFRESH: false

jobs:
  read-metadata:
    runs-on: ubuntu-latest
    outputs:
      name: ${{ steps.meta.outputs.name }}
      versions: ${{ steps.meta.outputs.versions }}
      platforms: ${{ steps.meta.outputs.platforms }}
      revision: ${{ steps.meta.outputs.revision }}
    steps:
    - name: Checkout repository
      uses: actions/checkout@v3
      with:
        fetch-depth: 1

    - name: Read metadata
      id: meta
      shell: bash
      run: |
        NAME=$(jq -r -c ".name" ${{ inputs.path }}/metadata.json)
        echo "name=${NAME}" >> $GITHUB_OUTPUT

        PLATFORMS=$(jq -c '.platforms | join(",")' ${{ inputs.path }}/metadata.json)
        echo "platforms=${PLATFORMS}" >> $GITHUB_OUTPUT

        VERSIONS=$(jq -r -c ".versions" ${{ inputs.path }}/metadata.json)
        echo "versions=${VERSIONS}" >> $GITHUB_OUTPUT

        REVISION=$(jq -r -c ".revision" ${{ inputs.path }}/revision.json)
        echo "revision=${REVISION}" >> $GITHUB_OUTPUT

  notify-start-build:
    runs-on: ubuntu-latest
    needs: read-metadata
    steps:
    - name: Send start build notification
      uses: appleboy/telegram-action@v0.1.1
      with:
        to: ${{ secrets.TELEGRAM_TO }}
        token: ${{ secrets.TELEGRAM_TOKEN }}
        format: html
        message: |
          üé¨ <b>Start building container image</b> üé¨
          <i>Application:</i> <code>${{ needs.read-metadata.outputs.name }}</code>

  build-and-push:
    runs-on: ubuntu-latest
    needs:
    - read-metadata
    - notify-start-build
    strategy:
      matrix:
        version: ["${{ fromJson(needs.read-metadata.outputs.versions) }}"]
      fail-fast: false
    steps:
    - name: Set image refresh flag for later
      if: inputs.schedule != ''
      run: |
        echo "IMAGE_REFRESH=true" >> $GITHUB_ENV

    - name: Checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 1

    - name: Set up QEMU
      uses: docker/setup-qemu-action@v3

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to the Container registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata (tags, labels) for Docker
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.BASE_NAME }}/${{ needs.read-metadata.outputs.name }}
        tags: |
          type=raw,value=${{ matrix.version }}
          type=raw,value=${{ matrix.version }}-${{ needs.read-metadata.outputs.revision }}
          type=raw,value=${{ matrix.version }}-${{ needs.read-metadata.outputs.revision }}-{{date 'YYYYMMDD'}}

    - name: Build and push
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ${{ inputs.path }}/Dockerfile
        build-args: |
          VERSION=${{ matrix.version }}
        provenance: false
        push: true
        platforms: "${{ fromJson(needs.read-metadata.outputs.platforms) }}"
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        pull: ${{ env.IMAGE_REFRESH }}
        no-cache: ${{ env.IMAGE_REFRESH }}

  notify-finish-build:
    runs-on: ubuntu-latest
    needs:
    - read-metadata
    - build-and-push
    steps:
    - name: send custom message with args
      uses: appleboy/telegram-action@v0.1.1
      with:
        to: ${{ secrets.TELEGRAM_TO }}
        token: ${{ secrets.TELEGRAM_TOKEN }}
        format: html
        message: |
          üèÅ <b>Build finished</b> üèÅ
          <i>Application:</i> <code>${{ needs.read-metadata.outputs.name }}</code>
