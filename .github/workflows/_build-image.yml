name: _build-image

on:
  workflow_call:
    inputs:
      path:
        required: true
        type: string
        description: |
          Path to the base or app folder
      image-refresh:
        required: false
        type: string
        description: |
          Will force a rebuild

env:
  REGISTRY: ghcr.io
  BASE_NAME: ${{ github.repository_owner }}
  BUILDX_NO_DEFAULT_ATTESTATIONS: 1
  IMAGE_REFRESH: false

jobs:
  read-metadata:
    runs-on: ubuntu-24.04
    outputs:
      name: ${{ steps.meta.outputs.name }}
      versions: ${{ steps.meta.outputs.versions }}
      platforms: ${{ steps.meta.outputs.platforms }}
      revision: ${{ steps.meta.outputs.revision }}
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 1

    - name: Read metadata
      id: meta
      shell: bash
      run: |
        NAME=$(jq -r -c ".name" ${{ inputs.path }}/metadata.json)
        echo "name=${NAME}" | tee -a "$GITHUB_OUTPUT"

        PLATFORMS=$(jq -r -c ".platforms" ${{ inputs.path }}/metadata.json)
        echo "platforms=${PLATFORMS}" | tee -a "$GITHUB_OUTPUT"

        VERSIONS=$(jq -r -c ".versions" ${{ inputs.path }}/metadata.json)
        echo "versions=${VERSIONS}" | tee -a "$GITHUB_OUTPUT"

        REVISION=$(jq -r -c ".revision" ${{ inputs.path }}/revision.json)
        echo "revision=${REVISION}" >> "$GITHUB_OUTPUT"

  notify-start-build:
    runs-on: ubuntu-24.04
    needs: read-metadata
    steps:
    - name: Send start build notification
      uses: appleboy/telegram-action@v1.0.1
      with:
        to: ${{ secrets.TELEGRAM_TO }}
        token: ${{ secrets.TELEGRAM_TOKEN }}
        format: html
        message: |
          üé¨ <b>Start building container image</b> üé¨
          <i>Application:</i> <code>${{ needs.read-metadata.outputs.name }}</code>
          Url: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}

  build-and-push:
    strategy:
      matrix:
        version: ["${{ fromJson(needs.read-metadata.outputs.versions) }}"]
        platform: ["${{ fromJson(needs.read-metadata.outputs.platforms) }}"]
      fail-fast: false
    runs-on: "${{ matrix.platform.runner }}"
    needs:
    - read-metadata
    - notify-start-build
    steps:
    - name: Set image refresh flag for later
      if: inputs.image-refresh != ''
      run: |
        echo "IMAGE_REFRESH=true" >> $GITHUB_ENV

    - name: Checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 1

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to the Container registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata (tags, labels) for Docker
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.BASE_NAME }}/${{ needs.read-metadata.outputs.name }}
        annotations:
          org.opencontainers.image.title=${{ needs.read-metadata.outputs.name }}
        labels:
          org.opencontainers.image.title=${{ needs.read-metadata.outputs.name }}
        tags: |
          type=raw,value=${{ matrix.version }}
          type=raw,value=${{ matrix.version }}-${{ needs.read-metadata.outputs.revision }}
          type=raw,value=${{ matrix.version }}-${{ needs.read-metadata.outputs.revision }}-{{date 'YYYYMMDD'}}

    - name: Build and push
      uses: docker/build-push-action@v6
      with:
        context: .
        file: "${{ inputs.path }}/Dockerfile"
        build-args: |
          VERSION="${{ matrix.version }}"
        provenance: false
        push: true
        platforms: "${{ matrix.platform.name }}"
        tags: "${{ steps.meta.outputs.tags }}"
        labels: "${{ steps.meta.outputs.labels }}"
        annotations: "${{ steps.meta.outputs.annotations }}"
        # cache-from: type=gha,scope="${{ needs.read-metadata.outputs.name }}-${{ matrix.version }}-${{ matrix.platform.name }}"
        # cache-to: type=gha,scope="${{ needs.read-metadata.outputs.name }}-${{ matrix.version }}-${{ matrix.platform.name }}",mode=max
        pull: "${{ env.IMAGE_REFRESH }}"
        no-cache: "${{ env.IMAGE_REFRESH }}"

  notify-finish-build:
    runs-on: ubuntu-24.04
    needs:
    - read-metadata
    - build-and-push
    steps:
    - name: send custom message with args
      uses: appleboy/telegram-action@v1.0.1
      with:
        to: ${{ secrets.TELEGRAM_TO }}
        token: ${{ secrets.TELEGRAM_TOKEN }}
        format: html
        message: |
          üèÅ <b>Build finished</b> üèÅ
          <i>Application:</i> <code>${{ needs.read-metadata.outputs.name }}</code>
          Url: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
